// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  email          String      @unique
  username       String      @unique
  password       String
  bio            String?

  profilePictureUrl String?
  profilePicturePublicId  String?

  posts          Post[]
  images         Image[]
  likes          Like[]      @relation("LikedBy")

  comments       Comment[]
  commentLikes   CommentLike[]

  followers      Follow[]    @relation("Followers")
  following      Follow[]    @relation("Following")

  joinedRealms   JoinRealm[] @relation("JoiningRealm")
  createdRealms  Realm[]     @relation("RealmCreatedBy")

  // Notifications
  notifications   Notification[] @relation("Notification")
  actedNotifications Notification[] @relation("Actor")

  // Messaging
  sent           Message[]   @relation("SentMessages")
  received       Message[]   @relation("ReceivedMessages") 
}

model Follow {
  follower       User        @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  followerId     String
  following      User        @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)
  followingId    String
  createdAt      DateTime    @default(now())

  @@id([followerId, followingId]) // Composite primary key to ensure uniqueness
}

model JoinRealm {
  joiner         User        @relation("JoiningRealm", fields: [joinerId], references: [id], onDelete: Cascade)
  joinerId       String
  realm          Realm       @relation("JoinedRealm", fields: [realmId], references: [id], onDelete: Cascade)
  realmId        String
  createdAt      DateTime    @default(now())

  @@id([joinerId, realmId]) // Composite primary key to ensure uniqueness
}

model Realm {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  name           String
  description    String
  realmPictureUrl String?
  realmPicturePublicId  String?

  creator        User       @relation("RealmCreatedBy", fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId      String

  posts          Post[]
  joined         JoinRealm[] @relation("JoinedRealm")

  notifications  Notification[] @relation("RealmNotifications")

  @@unique([name])
}

model Post {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  published      Boolean

  realm          Realm?       @relation(fields: [realmId], references: [id], onDelete: Cascade)
  realmId        String?

  title          String?
  text           String?
  images         Image[]

  author         User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId       String
  likes          Like[]      @relation("LikedPost")
  comments       Comment[]

  notifications  Notification[] @relation("PostNotifications")
}

model Image {
  id             String      @id @default(uuid())
  url            String
  publicId       String?
  owner          User?        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId        String?
  post           Post?       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         String?
}

model Like {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  user           User       @relation("LikedBy", fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  post           Post       @relation("LikedPost", fields: [postId], references: [id], onDelete: Cascade)
  postId         String

  @@unique([userId, postId]) // Ensures a user can like a post only once
  @@index([userId])
  @@index([postId])
}

model Comment {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  comment        String
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  post           Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId         String
  parent         Comment?    @relation("NestedComments", fields: [parentId], references: [id], onDelete: Cascade)
  parentId       String?
  nestedComments Comment[]   @relation("NestedComments")

  likes          CommentLike[]

  notifications  Notification[] @relation("CommentNotifications")
}

model CommentLike {
  id             String      @id @default(uuid())
  createdAt      DateTime    @default(now())
  
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  comment        Comment     @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId      String

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
}

model Notification {
  id         String     @id @default(uuid())
  userId     String
  user       User      @relation("Notification", fields: [userId], references: [id], onDelete: Cascade)
  actorId    String
  actor      User      @relation("Actor", fields: [actorId], references: [id], onDelete: Cascade)
  type       String
  sourceType NotificationSourceType

  postId     String?
  commentId  String?
  realmId    String?

  post       Post?      @relation("PostNotifications", fields: [postId], references: [id], onDelete: Cascade)
  comment    Comment?   @relation("CommentNotifications", fields: [commentId], references: [id], onDelete: Cascade)
  realm      Realm?     @relation("RealmNotifications", fields: [realmId], references: [id], onDelete: Cascade)

  createdAt  DateTime   @default(now())
  isRead     Boolean    @default(false)

  @@index([userId])
}

enum NotificationSourceType {
  POST
  COMMENT
  REALM
  USER
}


// Socket
model Message {
  id          Int      @id @default(autoincrement())
  senderId    String
  receiverId  String
  imageUrl    String?
  content     String?
  sender      User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver    User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  createdAt   DateTime @default(now())
}